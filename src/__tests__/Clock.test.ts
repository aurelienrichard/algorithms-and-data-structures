import { describe, test, expect } from 'vitest'
import { Clock } from '../algorithms/Clock'

describe('Clock', () => {
	test('Creating a new clock with an initial time', () => {
		expect(new Clock(8).toString()).toBe('08:00')
		expect(new Clock(11, 9).toString()).toBe('11:09')
		expect(new Clock(24, 0).toString()).toBe('00:00')
		expect(new Clock(25, 0).toString()).toBe('01:00')
		expect(new Clock(100, 0).toString()).toBe('04:00')
		expect(new Clock(1, 60).toString()).toBe('02:00')
		expect(new Clock(0, 160).toString()).toBe('02:40')
		expect(new Clock(0, 1723).toString()).toBe('04:43')
		expect(new Clock(25, 160).toString()).toBe('03:40')
		expect(new Clock(201, 3001).toString()).toBe('11:01')
		expect(new Clock(72, 8640).toString()).toBe('00:00')
		expect(new Clock(-1, 15).toString()).toBe('23:15')
		expect(new Clock(-25, 0).toString()).toBe('23:00')
		expect(new Clock(-91, 0).toString()).toBe('05:00')
		expect(new Clock(1, -40).toString()).toBe('00:20')
		expect(new Clock(1, -160).toString()).toBe('22:20')
		expect(new Clock(1, -4820).toString()).toBe('16:40')
		expect(new Clock(-25, -160).toString()).toBe('20:20')
		expect(new Clock(-121, -5810).toString()).toBe('22:10')
	})

	test('Adding and subtracting minutes', () => {
		expect(new Clock(10, 0).plus(3).toString()).toBe('10:03')
		expect(new Clock(6, 41).plus(0).toString()).toBe('06:41')
		expect(new Clock(0, 45).plus(40).toString()).toBe('01:25')
		expect(new Clock(10, 0).plus(61).toString()).toBe('11:01')
		expect(new Clock(0, 45).plus(160).toString()).toBe('03:25')
		expect(new Clock(23, 59).plus(2).toString()).toBe('00:01')
		expect(new Clock(5, 32).plus(1500).toString()).toBe('06:32')
		expect(new Clock(1, 1).plus(3500).toString()).toBe('11:21')
		expect(new Clock(10, 3).minus(3).toString()).toBe('10:00')
		expect(new Clock(10, 3).minus(30).toString()).toBe('09:33')
		expect(new Clock(10, 3).minus(70).toString()).toBe('08:53')
		expect(new Clock(0, 3).minus(4).toString()).toBe('23:59')
		expect(new Clock(0, 0).minus(160).toString()).toBe('21:20')
		expect(new Clock(6, 15).minus(160).toString()).toBe('03:35')
		expect(new Clock(5, 32).minus(1500).toString()).toBe('04:32')
		expect(new Clock(2, 20).minus(3000).toString()).toBe('00:20')
	})

	test('Construct two separate clocks, set times, test if they are equal', () => {
		expect(new Clock(15, 37).equals(new Clock(15, 37))).toBeTruthy()
		expect(new Clock(15, 36).equals(new Clock(15, 37))).toBeFalsy()
		expect(new Clock(14, 37).equals(new Clock(15, 37))).toBeFalsy()
		expect(new Clock(10, 37).equals(new Clock(34, 37))).toBeTruthy()
		expect(new Clock(3, 11).equals(new Clock(99, 11))).toBeTruthy()
		expect(new Clock(22, 40).equals(new Clock(-2, 40))).toBeTruthy()
		expect(new Clock(17, 3).equals(new Clock(-31, 3))).toBeTruthy()
		expect(new Clock(13, 49).equals(new Clock(-83, 49))).toBeTruthy()
		expect(new Clock(0, 1).equals(new Clock(0, 1441))).toBeTruthy()
		expect(new Clock(2, 2).equals(new Clock(2, 4322))).toBeTruthy()
		expect(new Clock(2, 40).equals(new Clock(3, -20))).toBeTruthy()
		expect(new Clock(4, 10).equals(new Clock(5, -1490))).toBeTruthy()
		expect(new Clock(6, 15).equals(new Clock(6, -4305))).toBeTruthy()
		expect(new Clock(7, 32).equals(new Clock(-12, -268))).toBeTruthy()
		expect(new Clock(18, 7).equals(new Clock(-54, -11513))).toBeTruthy()
	})
})
